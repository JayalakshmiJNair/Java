package multithread;

import java.util.Random;

class Square extends Thread {
    private final int number;

    Square(int number) {
        this.number = number;
    }

    @Override
    public void run() {
        int square = number * number;
        System.out.println("Square of " + number + " = " + square);
    }
}

class Cube extends Thread {
    private final int number;

    Cube(int number) {
        this.number = number;
    }

    @Override
    public void run() {
        int cube = number * number * number;
        System.out.println("Cube of " + number + " = " + cube);
    }
}

class Number extends Thread {
    @Override
    public void run() {
        Random random = new Random();

        for (int i = 0; i < 5; i++) {
            int randomNumber = random.nextInt(100); // Generate a random number between 0 and 99
            System.out.println("Random number generated: " + randomNumber);

            if (randomNumber % 2 == 0) {
                Square squareThread = new Square(randomNumber);
                squareThread.start();
            } else {
                Cube cubeThread = new Cube(randomNumber);
                cubeThread.start();
            }

            try {
                Thread.sleep(1000); // Pause for 1 second
            } catch (InterruptedException e) {
                System.err.println("Thread interrupted: " + e.getMessage());
            }
        }
    }
}

public class MultiThread {
    public static void main(String[] args) {
        Number numberThread = new Number();
        numberThread.start();
    }
}
